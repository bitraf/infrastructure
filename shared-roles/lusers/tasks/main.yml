---
- become: yes
  tags: lusers
  vars:
    # NOTE(mastensg): the keys are each for an ansible_distribution, but could
    # be changed to ansible_system if we can assume that "Linux" =>
    # "/bin/bash". discussion:
    # https://github.com/bitraf/infrastructure/pull/159#discussion_r692656301

    login_shell:
      Debian: "/bin/bash"
      FreeBSD: "/bin/sh"
      OpenBSD: "/bin/sh"
    nologin_shell:
      Debian: "/usr/sbin/nologin"
      FreeBSD: "/usr/sbin/nologin"
      OpenBSD: "/sbin/nologin"
    usernames: "{{ users|dict2items|map(attribute='key')|list }}"
  block:
    - name: add luser
      with_items: "{{ lusers }}"
      user:
        name: "{{ item }}"
        shell: "{{ login_shell[ansible_distribution] }}"

    - name: getent passwd
      getent:
        database: passwd

    - name: disable luser
      with_items: "{{ usernames }}"
      when: (item not in lusers) and (item in getent_passwd)
      user:
        name: "{{ item }}"
        shell: "{{ nologin_shell[ansible_distribution] }}"

    - name: create ~/.ssh
      file:
        path: "/home/{{ item }}/.ssh"
        state: directory
        owner: "{{ item }}"
        group: "{{ item }}"
      with_items: "{{ lusers }}"

    - name: authorized_keys, exclusively managed by Ansible
      copy:
        dest: "/home/{{ item }}/.ssh/authorized_keys"
        content: "{{ users[item].authorized_keys }}"
      when: lusers_authorized_keys_exclusive
      with_items: "{{ lusers }}"

    - name: authorized_keys, shared management with Ansible
      authorized_key:
        user: "{{ item }}"
        key: "{{ users[item].authorized_keys }}"
      with_items: "{{ lusers }}"
      when: not lusers_authorized_keys_exclusive
